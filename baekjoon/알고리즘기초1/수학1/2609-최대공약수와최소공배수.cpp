/* ----------<문제 정의>----------
문제:
    - 최대공약수: 공약수 중 가장 큰 것
    - 최소공약수: 양의 공배수 가운데 가장 작은 하나
입력: 두 개의 자연수(최대 1만)
출력: 최대공약수, 최소공약수 출력
*/
/* ----------<알고리즘>----------
(최대공약수)
    각각 약수 구하기
    공약수 찾기
    공약수 중 가장 큰 것 찾기

(최소공배수)
    1. 정확한 인수분해를 통해 
    공약수와 같은 공약수의 개수가 많은 것을 선택, 
    서로 없는 약수는 그대로 곱하여 구한다.
    ✅2. 배수가 같아질 때까지 곱하여 구한다.
*/
#include <iostream>
using namespace std;
int a[10001];
int b[10001];
int main(){
    int n1, n2, temp1, temp2;
    cin >> n1 >> n2;
    // n1의 약수 구하기
    for(int i = 1 ; i <= n1; i++){
        if(n1 % i == 0){   // i에 대해 나눠지면 반복 나누기. (안 나누어 떨어지더라도 종료하도록 해야 함)
            a[i] = 1;
        }
    }

    // n2의 약수 구하기
    for(int i = 1 ; i <= n2; i++){
        if(n2 % i == 0){   // i에 대해 나눠지면 반복 나누기. (안 나누어 떨어지더라도 종료하도록 해야 함)
            b[i] = 1;
        }
    }

    // 공약수이므로 더 작은 값부터 공약수가 존재. n1에 더 작은값을 할당
    for(int i = (n1 > n2) ? n2 : n1; i > 0; i--){
        if(a[i] == 1 && b[i] == 1){
            cout << i << '\n';  // 최대공약수 출력 - 공약수 중 가장 큰 것 출력하고 break
            break;
        }
    }
    // 최소 공배수 찾기
    temp1 = n1, temp2 = n2;
    while(temp1 != temp2){
        if(temp1 > temp2) temp2+=n2;
        else temp1+=n1;
    }
    cout << temp1;
}