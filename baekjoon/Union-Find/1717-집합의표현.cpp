/* ----------<문제 정의>----------
문제: 합집합 연산, 두 원소가 같은 집합에 포함되어 있는지를 확인하는 연산 수행
입력: 집합의 개수 n+1, 연산 수 m  (1<=n<=1,000,000 1<=m<=100,000)
출력: 두 원소가 집합에 포함되어 있는지 여부(YES/NO)
사전 상태: 초기에 {0}, {1},..., {n}이 각각 n+1 개의 집합을 이루고 있다.
시간 제한: 2초
*/
/* ----------<알고리즘>----------
약 10만번의 연산을 약 100만번 순회한다고하면 무조건 시간초과!

for m동안
    첫 번째 0 입력 시, 합집합 연산(0 ~ n 배열이 hash로 정의해놓고 합집합일 때 서로의 집합에 넣는 식)
    첫 번째 1 입력 시, 두 원소가 같은 집합에 포함되어 있는지 판단하는 연산
*/
/* ----------<궁금한 것>----------
합집합 연산 어떻게 하지?
- 0 ~ n 배열이 hash로 정의해놓고 합집합일 때 서로의 집합에 넣는 식으로 해야하나?
*/
/* ----------<반례>----------
0 1 3
0 3 5
1 1 5
*/
#include <iostream>
#include <vector>
using namespace std;

vector<int> set[1000001];
int main(){
    int n, m;
    int a, b, c;
    int chk = 0;
    cin >> n >> m;
    for(int i = 0; i < m; i++){
        cin >> a >> b >> c;
        chk = 0;
        if(a == 0){
            set[b].push_back(c);
            set[c].push_back(b);
        }
        else if(a == 1){
            for(int j = 0; j < set[b].size();j++){
                if(set[b][j] == c){
                    chk = 1;
                    break;
                }
            }
            if(chk == 1)
                cout << "YES" << endl;
            else
                cout << "NO" << endl;
        }
    }
}